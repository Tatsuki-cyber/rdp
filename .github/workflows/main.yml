name: RDP - Self-Hosted Unlimited

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    # Must run on a self-hosted Windows runner (tagged "self-hosted" and "windows")
    runs-on: [self-hosted, windows]

    # No timeout-minutes: job will run until cancelled (self-hosted runner required)
    steps:

      - name: Configure Core RDP Settings
        shell: powershell
        run: |
          Write-Host "Configuring Remote Desktop and firewall..."
          # Enable Remote Desktop (allow connections)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
            -Name "fDenyTSConnections" -Value 0 -Force

          # (Optional) disable Network Level Authentication if necessary (0 = disabled)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name "SecurityLayer" -Value 0 -Force

          # Ensure firewall rule for port 3389 (Tailscale typically doesn't require this but it's fine)
          netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null || Write-Host "No existing rule"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force
          Write-Host "RDP and firewall configured."

      - name: Create or update RDP user (use repo secret SIMPLE_PASSWORD)
        shell: powershell
        env:
          SIMPLE_PASSWORD: ${{ secrets.SIMPLE_PASSWORD }}
        run: |
          Write-Host "Creating/updating local user 'RDP'..."

          # Prefer secret SIMPLE_PASSWORD; fallback ONLY for quick tests (not for production)
          if ($env:SIMPLE_PASSWORD -and $env:SIMPLE_PASSWORD.Trim() -ne "") {
              $passwordPlain = $env:SIMPLE_PASSWORD
          } else {
              Write-Warning "secrets.SIMPLE_PASSWORD not set. Using fallback password (do NOT use in production)."
              $passwordPlain = "SimplePass123!"
          }

          $securePass = ConvertTo-SecureString $passwordPlain -AsPlainText -Force

          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -Description "RDP user for workflows"
              Write-Host "User 'RDP' created."
          } else {
              Write-Host "User 'RDP' already exists — updating password."
              $u = Get-LocalUser -Name "RDP"
              $u | Set-LocalUser -Password $securePass
          }

          # Add to groups (silently continue on error)
          Add-LocalGroupMember -Group "Administrators" -Member "RDP" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue

          # Export credentials to GITHUB_ENV as two separate variables
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_USER=RDP"
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_PASS=$passwordPlain"

          # verify
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }
          Write-Host "RDP user ready."

      - name: Install Tailscale if missing
        shell: powershell
        run: |
          $tsExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
          if (-not (Test-Path $tsExe)) {
              Write-Host "Tailscale not found — downloading and installing..."
              $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
              $installerPath = Join-Path $env:TEMP "tailscale.msi"
              Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
              Start-Process -FilePath msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
              Remove-Item $installerPath -Force
              if (-not (Test-Path $tsExe)) {
                  Write-Error "Tailscale installation failed."
                  exit 1
              }
              Write-Host "Tailscale installed."
          } else {
              Write-Host "Tailscale already installed."
          }

      - name: Establish Tailscale connection (requires secret TAILSCALE_AUTH_KEY)
        shell: powershell
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if (-not $env:TAILSCALE_AUTH_KEY -or $env:TAILSCALE_AUTH_KEY.Trim() -eq "") {
              Write-Error "secrets.TAILSCALE_AUTH_KEY is not set. Add it in repository Settings -> Secrets."
              exit 1
          }

          $tsExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
          if (-not (Test-Path $tsExe)) {
              Write-Error "tailscale.exe not found at expected path: $tsExe"
              exit 1
          }

          # Use a hostname that incorporates the GitHub run id (safe interpolation)
          $hostname = "gh-runner-$($env:GITHUB_RUN_ID)"
          Write-Host "Bringing Tailscale up with hostname: $hostname"
          & $tsExe up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=$hostname --accept-routes

          # Try to get an IPv4 address (retry loop)
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 20) {
              $ipOut = (& $tsExe ip -4) 2>$null
              # pick first token that looks like an IPv4
              foreach ($tok in $ipOut -split '\s+') {
                  if ($tok -match '^\d{1,3}(\.\d{1,3}){3}$') {
                      $tsIP = $tok
                      break
                  }
              }
              if (-not $tsIP) {
                  Start-Sleep -Seconds 3
                  $retries++
              }
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned after retries. Check Tailscale status manually."
              # Output status for debugging
              & $tsExe status || Write-Host "Unable to run 'tailscale status'"
              exit 1
          }

          Write-Host "Assigned Tailscale IPv4: $tsIP"
          Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tsIP"

      - name: Verify RDP accessibility (basic TCP test)
        shell: powershell
        run: |
          $ip = $env:TAILSCALE_IP
          Write-Host "Testing TCP connectivity to $ip:3389 ..."
          try {
              $test = Test-NetConnection -ComputerName $ip -Port 3389 -WarningAction SilentlyContinue
              if ($test.TcpTestSucceeded) {
                  Write-Host "TCP test: success"
              } else {
                  Write-Warning "TCP test: failed (remote host may still accept RDP via Windows client)."
              }
          } catch {
              Write-Warning "Test-NetConnection failed or unavailable: $_"
          }

      - name: Maintain Connection (infinite loop — cancel to stop)
        shell: powershell
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address (Tailscale): $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $env:RDP_PASS"
          Write-Host "==================`n"

          Write-Host "Workflow will remain active until you cancel it (self-hosted runner)."
          while ($true) {
              Write-Host "[$(Get-Date -Format 'u')] RDP Active - cancel the workflow to stop"
              Start-Sleep -Seconds 300
          }
